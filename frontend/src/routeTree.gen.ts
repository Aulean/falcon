/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorkspacesRouteImport } from './routes/workspaces'
import { Route as PdfRouteImport } from './routes/pdf'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkspaceNewRouteImport } from './routes/workspace.new'
import { Route as WorkspaceCaseIdRouteImport } from './routes/workspace.$caseId'

const WorkspacesRoute = WorkspacesRouteImport.update({
  id: '/workspaces',
  path: '/workspaces',
  getParentRoute: () => rootRouteImport,
} as any)
const PdfRoute = PdfRouteImport.update({
  id: '/pdf',
  path: '/pdf',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspaceNewRoute = WorkspaceNewRouteImport.update({
  id: '/workspace/new',
  path: '/workspace/new',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspaceCaseIdRoute = WorkspaceCaseIdRouteImport.update({
  id: '/workspace/$caseId',
  path: '/workspace/$caseId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/pdf': typeof PdfRoute
  '/workspaces': typeof WorkspacesRoute
  '/workspace/$caseId': typeof WorkspaceCaseIdRoute
  '/workspace/new': typeof WorkspaceNewRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/pdf': typeof PdfRoute
  '/workspaces': typeof WorkspacesRoute
  '/workspace/$caseId': typeof WorkspaceCaseIdRoute
  '/workspace/new': typeof WorkspaceNewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/pdf': typeof PdfRoute
  '/workspaces': typeof WorkspacesRoute
  '/workspace/$caseId': typeof WorkspaceCaseIdRoute
  '/workspace/new': typeof WorkspaceNewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/pdf'
    | '/workspaces'
    | '/workspace/$caseId'
    | '/workspace/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/pdf'
    | '/workspaces'
    | '/workspace/$caseId'
    | '/workspace/new'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/pdf'
    | '/workspaces'
    | '/workspace/$caseId'
    | '/workspace/new'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  PdfRoute: typeof PdfRoute
  WorkspacesRoute: typeof WorkspacesRoute
  WorkspaceCaseIdRoute: typeof WorkspaceCaseIdRoute
  WorkspaceNewRoute: typeof WorkspaceNewRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/workspaces': {
      id: '/workspaces'
      path: '/workspaces'
      fullPath: '/workspaces'
      preLoaderRoute: typeof WorkspacesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pdf': {
      id: '/pdf'
      path: '/pdf'
      fullPath: '/pdf'
      preLoaderRoute: typeof PdfRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspace/new': {
      id: '/workspace/new'
      path: '/workspace/new'
      fullPath: '/workspace/new'
      preLoaderRoute: typeof WorkspaceNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspace/$caseId': {
      id: '/workspace/$caseId'
      path: '/workspace/$caseId'
      fullPath: '/workspace/$caseId'
      preLoaderRoute: typeof WorkspaceCaseIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  PdfRoute: PdfRoute,
  WorkspacesRoute: WorkspacesRoute,
  WorkspaceCaseIdRoute: WorkspaceCaseIdRoute,
  WorkspaceNewRoute: WorkspaceNewRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
